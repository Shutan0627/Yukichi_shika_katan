from openai import OpenAI
import os

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

def create_feedback(formatted_output, comment):
    client = OpenAI(api_key=OPENAI_API_KEY)
    comments = "\n".join([f"[{c[0]} : {c[1]}] {c[2]}" for c in comment])

    content = (
        "<スライド発表練習の評価>\n",
        "- あなたはスライド発表練習の問題点から、評価を行う教師です。\n",
        "- 音声認識の結果と、抑揚の有無(pitch)、話の速さ(wpm)、視線の向き(eye)についての情報が、ユーザーの入力から与えられます。\n",
        "- この情報をもとに、出力形式に従って発表者にフィードバックを行ってください。\n",
        "<注意事項>\n",
        "- この情報は、スライド発表練習のデータをもとに問題点・指摘点をあげ、時系列順に並び替えて作成されたものです。\n",
        "- listの各項目は、[int: 経過時間(秒), str: 評価項目, str: 評価内容]です。\n",
        "- 音声認識の結果は誤検出も含むので、全体の文脈を加味して下さい。\n",
        "- このリストにない（指摘がなかった）項目や具体的な評価が与えられていない項目は基準を満たしていたことを示すので、良かった点として評価してあげて下さい。\n",
        "- 各項目の判断頻度はそれぞれ、wpm: 2-3秒ごと、eye: 4-5秒ごと、pitch: 30秒ごとです。\n",
        "- 総評では、音声認識の結果から全体の内容がどのように理解できるか、筋が通っているかを評価して下さい。\n",
        "- Stringで、出力形式に従って記述してください。\n",
        "<出力形式>\n",
    
        "概要\n",
        "ここに発表練習に対し労わるようなコメントをし、何が問題だったかを要約します。\n",
        "講評\n",
        "1. 話し方の評価:〇〇点（２０点満点）\n",
        "ここでは、音声認識の結果から論理の飛躍がないか、フィラーなどを多用していないかなどを評価する。誤検出が多い場合は滑舌が良くない場合が多い。ただし、固有名詞は誤検出しやすいので考慮しなくて良い。無駄な語句が少ないほど、評価は高くなる。\n",
        "2. 話の速さ:〇〇点（２０点満点）\n",
        "wpmの評価結果から、話の速さが適切であるかを評価する。一般に、350wpmが適切とされている。これを大幅に上回っている場合は、何秒の時点で早かったのかをいくつか例示する。指摘の頻度が低いほど、評価は高くなる。\n",
        "3. 抑揚:〇〇点（２０点満点）\n",
        "pitchの評価結果から、抑揚が適切であるかを評価する。抑揚がないとされていた場合は、何秒の時点で抑揚がなかったのかを例示する。指摘の頻度が少ないほど、抑揚に問題がなかった（適切であった）ことを表しているので、評価は高くなる。\n",
        "4. 視線:〇〇点（２０点満点）\n", 
        "eyeの評価結果から、視線が適切であるかを評価する。視線がないとされている場合は、何秒の時点で視線がなかったのかを例示する。指摘の頻度が少ないほど、常に真っ直ぐ見ていたことを示しているので、評価は高くなる。\n",
        "5. 内容の一貫性:〇〇点（２０点満点）\n",
        "音声認識の結果から内容を要約する。次に、何が示されていたかをリストアップする。説明が明確で、趣旨が理解できるものであったかを評価する。そう判断した理由も説明する。\n"
        "総評:〇〇点（上記５項目を合計した点数が入る。この注釈は出力しないこと。）\n",
        "ここに全体の内容を要約し、何が問題だったか、何が良かったかを要約する。改善点を示し、練習に励むよう促してあげて下さい。\n",

        "<音声認識の結果>\n",
        f"{formatted_output}\n",
        "<問題点・指摘点のリスト>\n",
        f"{comments}\n",
    )

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system", 
                "content": [
                    {"type": "text", "text": f"{content}"},
                ],
            },
        ],
    )

    message = response.choices[0].message.content
    response2 = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system", 
                "content": [
                    {"type": "text", "text": f"この評価を140字程度で要約して下さい。点数は一番最初に表示して下さい。出力するのは点数と要約の内容のみで、それ以外は出力しないでください。文字列で出力し、Markdown形式では出力しないでください。\n{message}"},
                ],
            },
        ],
    )
    message = response2.choices[0].message.content
    return message
